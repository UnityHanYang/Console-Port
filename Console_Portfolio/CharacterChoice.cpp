#include "CharacterChoice.h"
#include <random>
#include <Windows.h>

int CharacterChoice::characterNum = 0;
int charNum = 0;
int g_nScreenIndex;
HANDLE g_hScreen[2];


#define ARROW 224
#define LEFT_ARROW 75
#define RIGHT_ARROW 77
#define Enter_Key 13
#define _CRT_SECURE_NO_WARNINGS

void CharacterChoice::SetColor(int fontColor, int backgroundColor)
{
	int Color = fontColor + backgroundColor * 16;
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), Color);
}

void CharacterChoice::PrintS(int count, int font, int background, bool isEndl, int x, int y)
{
	SetColor(font, background);
	gotoxy(x, y);

	for (int i = 0; i < count; i++)
	{
		std::cout << "ㅁ";
	}

	if (isEndl)
	{
		std::cout << std::endl;
	}
}

void CharacterChoice::gotoxy(int x, int y)
{
	COORD pos = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

bool CharacterChoice::ChoiceScene()
{
	NinjaDot* nd = new NinjaDot;
	ArcherDot* ad = new ArcherDot;
	MapDot* md = new MapDot;


	std::cout << "\n\t\t\t\t\t\t      캐릭터를 선택하세요.\n\n\n\n";
	std::cout << "\n\n\t\t\t   겐지\t\t\t\t\t\t\t\t\t한조\n\n";
	PrintBackGround(2, 2, 4, 12);
	PrintBackGround(2, 2, 72, 12);
	nd->PrintNinZaPortrait1(20, 13);
	ad->PrintArcherPortrait1(92, 13);
	SetColor(15, 0);
	md->PrintOperation_Keys(130, 3);
	PrintOperate(132, 5);
	std::cout << "\n\n\n";
	int input;
	while (true)
	{
		if (_kbhit())
		{
			input = _getch();
			if (input == ARROW)
			{
				system("cls");
				input = _getch();
				switch (input)
				{
				case LEFT_ARROW:
					std::cout << "\n\t\t\t\t\t\t      캐릭터를 선택하세요.\n\n\n\n";
					std::cout << "\n\n\t\t\t ▶ 겐지 ◀\t\t\t\t\t\t\t\t한조\n\n";
					PrintBackGround(11, 11, 4, 12);
					PrintBackGround(2, 2, 72, 12);
					nd->PrintNinZaPortrait1(20, 13);
					ad->PrintArcherPortrait1(92, 13);
					SetColor(15, 0);
					md->PrintOperation_Keys(130, 3);
					PrintOperate(132, 5);
					charNum = 1;
					break;
				case RIGHT_ARROW:
					std::cout << "\n\t\t\t\t\t\t      캐릭터를 선택하세요.\n\n\n\n";
					std::cout << "\n\n\t\t\t   겐지\t\t\t\t\t\t\t\t    ▶ 한조 ◀\n\n";
					PrintBackGround(2, 2, 4, 12);
					PrintBackGround(11, 11, 72, 12);
					nd->PrintNinZaPortrait1(20, 13);
					ad->PrintArcherPortrait1(92, 13);
					SetColor(15, 0);
					md->PrintOperation_Keys(130, 3);
					PrintOperate(132, 5);
					charNum = 2;
					break;
				default:
					std::cout << "\n\t\t\t\t\t\t      캐릭터를 선택하세요.\n\n\n\n";
					std::cout << "\n\n\t\t\t   겐지\t\t\t\t\t\t\t\t    ▶ 한조 ◀\n\n";
					PrintBackGround(2, 2, 4, 12);
					PrintBackGround(11, 11, 72, 12);
					nd->PrintNinZaPortrait1(20, 13);
					ad->PrintArcherPortrait1(92, 13);
					SetColor(15, 0);
					md->PrintOperation_Keys(130, 3);
					PrintOperate(132, 5);
				}
			}
			else if (input == 13)
			{
				system("cls");
				if (charNum == 1 || charNum == 2)
				{
					delete ad;
					delete nd;
					delete md;
					ReadMore(charNum);
					return true;
				}
				else
				{
					std::cout << "\n\t\t\t\t\t\t      캐릭터를 선택하세요.\n\n\n\n";
					std::cout << "\n\n\t\t\t   겐지\t\t\t\t\t\t\t\t    ▶ 한조 ◀\n\n";
					PrintBackGround(2, 2, 4, 12);
					PrintBackGround(11, 11, 72, 12);
					nd->PrintNinZaPortrait1(20, 13);
					ad->PrintArcherPortrait1(92, 13);
					SetColor(15, 0);
					md->PrintOperation_Keys(130, 3);
					PrintOperate(132, 5);
				}
			}
		}
	}

	delete ad;
	delete nd;
	delete md;
}

void CharacterChoice::ReadMore(int num)
{
	PrintCharacterAbility(num);
	SetColor(0, 15);
	gotoxy(30, 17);
	std::cout << "  이 캐릭터로 하시겠습니까?";
	gotoxy(30, 20);
	std::cout << "        예 / 아니오";

	SetColor(15, 0);
	int yesOrNo = 0;
	int input;
	while (true)
	{
		if (_kbhit())
		{
			input = _getch();
			if (input == ARROW)
			{
				system("cls");
				input = _getch();
				switch (input)
				{
				case LEFT_ARROW:
					PrintCharacterAbility(num);
					gotoxy(30, 17);
					SetColor(0, 15);
					std::cout << "  이 캐릭터로 하시겠습니까?";
					gotoxy(30, 20);
					SetColor(15, 15);
					std::cout << "        ";
					gotoxy(39, 20);
					SetColor(12, 15);
					std::cout << "예";
					gotoxy(41, 20);
					SetColor(0, 15);
					std::cout << " / 아니오";
					yesOrNo = 1;
					break;
				case RIGHT_ARROW:
					PrintCharacterAbility(num);
					gotoxy(30, 17);
					SetColor(0, 15);
					std::cout << "  이 캐릭터로 하시겠습니까?";
					gotoxy(30, 20);
					SetColor(0, 15);
					std::cout << "        예 / ";
					gotoxy(43, 20);
					SetColor(12, 15);
					std::cout << "아니오";
					yesOrNo = 2;
					break;
				default:
					PrintCharacterAbility(num);
					SetColor(0, 15);
					gotoxy(30, 17);
					std::cout << "  이 캐릭터로 하시겠습니까?";
					gotoxy(30, 20);
					std::cout << "        예 / 아니오";
					break;
				}
			}
			else if (input == 13)
			{
				system("cls");
				if (yesOrNo == 1)
				{
					if (charNum == 1)
					{
						characterNum = 1;
					}
					else
					{
						characterNum = 2;
					}
					break;
				}
				else if (yesOrNo == 2)
				{
					ChoiceScene();
				}
			}
			SetColor(15, 0);
		}
	}
}

void CharacterChoice::PrintBackGround(int font, int background, int x, int y)
{
	PrintS(26, font, background, 1, x, y);
	PrintS(26, font, background, 1, x, y + 1);
	PrintS(26, font, background, 1, x, y + 2);
	PrintS(26, font, background, 1, x, y + 3);
	PrintS(26, font, background, 1, x, y + 4);
	PrintS(26, font, background, 1, x, y + 5);
	PrintS(26, font, background, 1, x, y + 6);
	PrintS(26, font, background, 1, x, y + 7);
	PrintS(26, font, background, 1, x, y + 8);
	PrintS(26, font, background, 1, x, y + 9);
	PrintS(26, font, background, 1, x, y + 10);
	PrintS(26, font, background, 1, x, y + 11);
	PrintS(26, font, background, 1, x, y + 12);
	PrintS(26, font, background, 1, x, y + 13);
	PrintS(26, font, background, 1, x, y + 14);
	PrintS(26, font, background, 1, x, y + 15);
	PrintS(26, font, background, 1, x, y + 16);
	PrintS(26, font, background, 1, x, y + 17);
	PrintS(26, font, background, 1, x, y + 18);
	PrintS(26, font, background, 1, x, y + 19);
	PrintS(26, font, background, 1, x, y + 20);
	PrintS(26, font, background, 1, x, y + 21);
	PrintS(26, font, background, 1, x, y + 22);
	PrintS(26, font, background, 1, x, y + 23);
	PrintS(26, font, background, 1, x, y + 24);
	PrintS(26, font, background, 1, x, y + 25);
	PrintS(26, font, background, 1, x, y + 26);
}

void CharacterChoice::PrintOperate(int x, int y)
{
	gotoxy(x, y);
	std::cout << "→: 오른쪽 선택";
	gotoxy(x, y + 2);
	std::cout << "←: 왼쪽 선택";
	gotoxy(x, y + 4);
	std::cout << "Enter: 선택";
	gotoxy(x, y + 6);
	std::cout << "선택을 하고 Enter 키를";
	gotoxy(x, y + 7);
	std::cout << "누르면 캐릭터에 대해";
	gotoxy(x, y + 8);
	std::cout << "자세히 볼 수 있습니다.";
	gotoxy(x, y + 10);
	std::cout << "선택이 안 된 캐릭터는 나중에";
	gotoxy(x, y + 11);
	std::cout << "동료가 되어 파티에 가입됩니다.";
}

void CharacterChoice::PrintNinjarBackGround()
{
	int background[18][157] = {
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
		{15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
	};


	for (int i = 0; i < 18; i++)
	{
		for (int j = 0; j < 157; j++)
		{
			SetColor(background[i][j], background[i][j]);
			std::cout << "ㅁ";
			SetColor(15, 15);
		}
		std::cout << std::endl;
	}

}

void CharacterChoice::PrintCharacterAbility(int num)
{
	NinjaDot* nd = new NinjaDot;
	ArcherDot* ad = new ArcherDot;
	MapDot* md = new MapDot;
	Battle* bt = new Battle;
	if (num == 1)
	{
		nd->PrintNinZa1();
		PrintNinjarBackGround();
		SetColor(0, 15);
		PrintAbilityTool(142, 50);
		gotoxy(146, 52);
		std::cout << "이름: 겐지";
		gotoxy(146, 54);
		std::cout << "직업: 닌자";
		gotoxy(146, 56);
		std::cout << "공격력: 7";
		gotoxy(146, 58);
		std::cout << "체력: 80";
		gotoxy(146, 60);
		std::cout << "방어력: 5";
		gotoxy(146, 62);
		std::cout << "치명타 확률: 2%";
	}
	else
	{
		bt->PrintEnmeyBack();
		ad->PrintArcher1(156, 1);
		SetColor(0, 15);
		PrintAbilityTool(142, 46);
		gotoxy(146, 48);
		std::cout << "이름: 한조";
		gotoxy(146, 50);
		std::cout << "직업: 궁수";
		gotoxy(146, 52);
		std::cout << "공격력: 10";
		gotoxy(146, 54);
		std::cout << "체력: 70";
		gotoxy(146, 56);
		std::cout << "방어력: 3";
		gotoxy(146, 58);
		std::cout << "치명타 확률: 5%";
	}
	md->PrintOperation_Keys(28, 3);
	SetColor(15, 0);

	delete ad;
	delete nd;
	delete md;
	delete bt;
}


void CharacterChoice::PrintAbilityTool(int x, int y)
{

	gotoxy(x, y);
	std::cout << "─────────────────────────────────";
	gotoxy(x, y + 14);
	std::cout << "─────────────────────────────────";
}


void CharacterChoice::ScreenInit()
{
	CONSOLE_CURSOR_INFO cci;

	//화면 버퍼 2개를 만든다.
	g_hScreen[0] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	g_hScreen[1] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);

	//커서를 숨긴다.
	cci.dwSize = 1;
	cci.bVisible = FALSE;
	SetConsoleCursorInfo(g_hScreen[0], &cci);
	SetConsoleCursorInfo(g_hScreen[1], &cci);
}

void CharacterChoice::ScreenFlipping()	// 두번째 스크린과 첫번째 스크린 교환
{
	SetConsoleActiveScreenBuffer(g_hScreen[g_nScreenIndex]);
	g_nScreenIndex = !g_nScreenIndex;
}

void CharacterChoice::ScreenClear()	// 사용한 스크린 비우는 함수
{
	COORD Coor = { 0, 0 };
	DWORD dw;
	FillConsoleOutputCharacter(g_hScreen[g_nScreenIndex], ' ', 1200 * 300, Coor, &dw);
}

void CharacterChoice::ScreenRelease()		// 마지막 삭제.
{
	CloseHandle(g_hScreen[0]);
	CloseHandle(g_hScreen[1]);
}


void CharacterChoice::ScreenPrint(int x, int y, std::string s)	// 두번째 스크린에 그림 그리는 함수
{
	DWORD dw;
	COORD CursorPosition = { x, y };
	SetConsoleCursorPosition(g_hScreen[g_nScreenIndex], CursorPosition);
	//WriteFile(g_hScreen[g_nScreenIndex], s.c_str(), s.size(), &dw, NULL);
	std::cout << s;
}


